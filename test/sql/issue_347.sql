begin;

    create table public.ingredient (
        id bigint generated by default as identity not null,
        created_at timestamp with time zone null default now(),
        name text,
        constraint ingredient_pkey primary key (id),
        constraint ingredient_name_key unique (name)
     );

    create table public.recipe (
        id bigint generated by default as identity not null,
        created_at timestamp with time zone default now(),
        name text not null,
        constraint recipe_pkey primary key (id),
        constraint recipe_name_key unique (name)
    );

    create table public.recipe_ingredient (
        id bigint generated by default as identity not null,
        created_at timestamp with time zone null default now(),
        recipe_id bigint references recipe (id),
        ingredient_id bigint references ingredient (id),
        recipe_ingredient_id bigint,
        constraint recipe_ingredient_pkey primary key (id),
        constraint recipe_ingredient_recipe_ingredient_id_fkey foreign key (recipe_ingredient_id) references public.recipe (id)
    );

    comment on constraint recipe_ingredient_recipe_ingredient_id_fkey
    on public.recipe_ingredient
    is E'@graphql({"foreign_name": "recipeIngredient", "local_name": "someOtherName"})';

    insert into public.recipe(name)
    values ('BBQ Dry Rub'), ('Carolina BBQ Sauce');

    insert into public.ingredient(id, name)
    values (2, 'Smoked Paprika');

    insert into recipe_ingredient(recipe_id, ingredient_id, recipe_ingredient_id)
    values (2, 2, null), (2, null, 1);

    select jsonb_pretty(
        graphql.resolve($$
        {
          __type(name: "RecipeIngredient") {
            kind
            fields {
              name
            }
          }
        }
        $$)
    );


    select jsonb_pretty(
        graphql.resolve($$
        {
          __type(name: "Recipe") {
            kind
            fields {
              name
            }
          }
        }
        $$)
    );

    select jsonb_pretty(
        graphql.resolve($$
            query GetRecipe {
              recipeCollection(filter: {id: {eq: 2}}) {
                edges {
                  node {
                    id
                    name
                    recipeIngredientCollection {
                      edges {
                        node {
                          id
                          recipe {
                            name
                          }
                          ingredient {
                            name
                          }
                          recipeIngredient {
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
        $$)
    );



rollback;
