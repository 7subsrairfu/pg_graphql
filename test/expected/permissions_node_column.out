begin;
    create table account(
        id serial primary key,
        encrypted_password varchar(255) not null
    );
    insert into public.account(encrypted_password)
    values
        ('hidden_hash');
    -- Superuser
    select graphql.resolve($$
    {
      account(id: "WyJhY2NvdW50IiwgMV0=") {
        id
        encryptedPassword
      }
    }
    $$);
                                      resolve                                       
------------------------------------------------------------------------------------
 {"data": {"account": {"id": 1, "encryptedPassword": "hidden_hash"}}, "errors": []}
(1 row)

    create role api;
    -- Grant access to GQL
    grant usage on schema graphql to api;
    grant all on all tables in schema graphql to api;
    -- Allow access to public.account.id but nothing else
    grant usage on schema public to api;
    grant all on all tables in schema public to api;
    revoke select on public.account from api;
    grant select (id) on public.account to api;
    set role api;
    -- Select permitted columns
    select graphql.resolve($$
    {
      account(id: "WyJhY2NvdW50IiwgMV0=") {
        id
      }
    }
    $$);
                    resolve                     
------------------------------------------------
 {"data": {"account": {"id": 1}}, "errors": []}
(1 row)

    -- Attempt select on revoked column
    select graphql.resolve($$
    {
      account(id: "WyJhY2NvdW50IiwgMV0=") {
        id
        encryptedPassword
      }
    }
    $$);
                                      resolve                                      
-----------------------------------------------------------------------------------
 {"data": null, "errors": ["Unknown field 'encryptedPassword' on type 'Account'"]}
(1 row)

rollback;
